#!/bin/bash
# rails-app-creator

# This script creates new rails applications with a variety of common 
#   configurations that can be passed in as command-line flags.



# Prints help information
usage()
{
cat << EOF
rails-app-creator --name myRailsApp

Creates a new rails application with commonly used functionality included.

Available options:

--name appName
  Specifies name for new Rails application

--help or -h
  Prints command information and options

--verbose or -v
  Prints each step in setup

--haml
  Adds haml to application

--rspec
  Adds rspec to application

--cucumber
  Adds cucumber to application

--jasmine
  Adds jasmine to application

--unicorn
  Adds unicorn as default app server in development, test, and production

--bootstrap
  Adds bootstrap to application
EOF
}



# Adds Haml gems to Gemfile
addHamlGems()
{
if [[ $VERBOSE -eq 1 ]]; then echo "Adding Haml gems to Gemfile."; fi
cat << EOF >> Gemfile
  
# Use Haml for templating
gem 'haml'
gem 'haml-rails'
EOF
}



# Replaces ERB layout with Haml layout
replaceErbLayout()
{
# Remove ERB layout file
if [[ $VERBOSE -eq 1 ]]; then echo "Deleting ERB layout file."; fi
rm app/views/layouts/application.html.erb

# Create Haml layout file
if [[ $VERBOSE -eq 1 ]]; then echo "Creating Haml layout file."; fi
cat << EOF >> app/views/layouts/application.html.haml
!!! 5

%html
  %head
    %title $APPNAME
    = stylesheet_link_tag 'application', media: "all", "data-turbolinks-track" => true
    = javascript_include_tag 'application', "data-turbolinks-track" => true
    = csrf_meta_tags

  %body
    =yield
EOF
}



# Add gems for rspec, cucumber, and jasmine to test/development group
addTestingGemsDevTestGroup()
{
if [[ $VERBOSE -eq 1 ]]
then echo "Adding testing gems to :development, :test group."
fi

# Begin Development/Test Group
cat << EOF >> Gemfile

# Testing Gems
group :development, :test do
EOF

# RSpec Development/Test Group
if [[ $RSPEC -eq 1 ]]
then
cat << EOF >> Gemfile
  gem 'rspec-rails'
  gem 'factory_girl_rails'
  gem 'faker'
EOF
fi

# Jasmine Development/Test Group
if [[ $JASMINE -eq 1 ]] 
then
cat << EOF >> Gemfile
  gem 'jasmine-rails'
  gem 'jasmine-jquery-rails'
  gem 'guard-jasmine'
EOF
fi

# End Development/Test Group
echo "end" >> Gemfile
}



# Add gems for rspec, cucumber, and jasmine to test group
addTestingGemsTestGroup()
{
if [[ $VERBOSE -eq 1 ]]
then echo "Adding testing gems to :test group."
fi

# Begin Test Group
cat << EOF >> Gemfile

# Testing Gems
group :test do
EOF

# RSpec Test Group
if [[ $RSPEC -eq 1 ]]
then
cat << EOF >> Gemfile
  gem 'shoulda-matchers'
  gem 'guard-rspec', :require => false
  gem 'simplecov', :require => false
EOF
fi

# Cucumber Test Group
if [[ $CUCUMBER -eq 1 ]] 
then
cat << EOF >> Gemfile
  gem 'cucumber-rails', require: false
  gem 'selenium-webdriver'
  gem 'database_cleaner'
  gem 'launchy'
  gem 'guard-cucumber'
EOF
# Add SimpleCov if RSpec didn't already add it
if [[ $RSPEC -ne 1 ]]; then "  gem 'simplecov', :require => false" >> Gemfile; fi
fi

# End Test Group
echo "end" >> Gemfile
}



# Set up RSpec in application
rspecSetup()
{
if [[ $VERBOSE -eq 1 ]]; then echo "Installing RSpec into application."; fi
rails g rspec:install

if [[ $VERBOSE -eq 1 ]]; then echo "Fixing .rspec file."; fi
cat << EOF > .rspec
--color -fd
--require rails_helper
EOF

if [[ $VERBOSE -eq 1 ]]; then echo "Adding directories for RSpec tests."; fi
mkdir spec/controllers spec/models spec/factories spec/helpers spec/views spec/requests spec/routing

if [[ $VERBOSE -eq 1 ]]; then echo "Creating binstub for RSpec."; fi
bundle binstubs rspec-core

if [[ $VERBOSE -eq 1 ]]; then echo "Adding Guardfile entry for RSpec."; fi
bundle exec guard init rspec
}



# Set up Cucumber in application
cucumberSetup()
{
if [[ $VERBOSE -eq 1 ]]; then echo "Installing Cucumber into application."; fi
rails g cucumber:install

if [[ $VERBOSE -eq 1 ]]; then echo "Creating binstub for Cucumber."; fi
bundle binstubs cucumber

if [[ $RSPEC -eq 1 ]] 
then
if [[ $VERBOSE -eq 1 ]]; then echo "Making FactoryGirl factories accessible."; fi
cat << EOF >> features/support/env.rb

# Make FactoryGirl factories accessible to Cucumber scenarios
Dir["../../spec/factories/*.rb"].each {|file| require_relative file }
EOF
fi

if [[ $VERBOSE -eq 1 ]]; then echo "Configuring DatabaseCleaner."; fi
cat << EOF >> features/support/database.rb
# Hook for DatabaseCleaner
Before do
  DatabaseCleaner.start
end

After do
  DatabaseCleaner.clean
end
EOF

if [[ $VERBOSE -eq 1 ]]; then echo "Adding Guardfile entry for Cucumber."; fi
bundle exec guard init cucumber
}



# Set up jasmine in application
jasmineSetup()
{
if [[ $VERBOSE -eq 1 ]]; then echo "Installing Jasmine into application."; fi
rails g jasmine_rails:install

if [[ $VERBOSE -eq 1 ]]; then echo "Creating Jasmine Helpers Directory."; fi
mkdir spec/javascripts/helpers

if [[ $VERBOSE -eq 1 ]]; then echo "Downloading jasmine-jquery."; fi
cd spec/javascripts/helpers
wget https://raw.github.com/velesin/jasmine-jquery/master/lib/jasmine-jquery.js

if [[ $VERBOSE -eq 1 ]]; then echo "Downloading jasmine-fixture."; fi
wget https://github.com/searls/jasmine-fixture/releases/download/1.2.0/jasmine-fixture.js
cd ../../..

if [[ $VERBOSE -eq 1 ]]; then echo "Adding Guardfile entry for Jasmine."; fi
bundle exec guard init jasmine

if [[ $VERBOSE -eq 1 ]]; then echo "Fixing Guardfile entry for Jasmine."; fi
NEWGUARD="\'jasmine\'\, :server => $APPSERVER, :server_mount => \'\/specs\'"
sed -i.bak "s/:jasmine/$NEWGUARD/" Guardfile
rm Guardfile.bak
}



# Set up SimpleCov in application
simplecovSetup()
{
if [[ $VERBOSE -eq 1 ]]; then echo "Adding .simplecov file."; fi
echo 'SimpleCov.start' > .simplecov

if [[ $RSPEC -eq 1 ]]
then
if [[ $VERBOSE -eq 1 ]]; then echo "Adding simplecov to RSpec."; fi
sed -i "1s/^/require \'simplecov\'\n\n/" spec/rails_helper.rb
fi

if [[ $CUCUMBER -eq 1 ]]
then
if [[ $VERBOSE -eq 1 ]]; then echo "Adding simplecov to Cucumber."; fi
sed -i "1s/^/require \'simplecov\'\n\n/" features/support/env.rb
fi
}



# Set up Unicorn as development, test, and production app server
unicornSetup()
{
if [[ $VERBOSE -eq 1 ]]; then echo "Adding Unicorn to Gemfile."; fi
cat << EOF >> Gemfile

# Use unicorn as application server
gem 'unicorn'
EOF
bundle install
  
if [[ $VERBOSE -eq 1 ]]; then echo "Creating Procfile."; fi
cat << EOF > Procfile
web: bundle exec unicorn -p $PORT -c ./config/unicorn.rb
EOF

if [[ $VERBOSE -eq 1 ]]; then echo "Creating Procfile.dev."; fi
cat << EOF > Procfile.dev
web: bundle exec unicorn -p $PORT -c ./config/unicorn.rb --no-default-middleware
EOF

if [[ $VERBOSE -eq 1 ]]; then echo "Creating unicorn.rb configuration file."; fi
cat << EOF > config/unicorn.rb
if ENV["RAILS_ENV"] == "development"
  worker_processes 1
else
  worker_processes Integer(ENV["WEB_CONCURRENCY"] || 3)
end

timeout 15
EOF

if [[ $VERBOSE -eq 1 ]]; then echo "Adding logging from Unicorn to stdout."; fi
sed -i '$ d' config/environments/development.rb
cat << EOF >> config/environments/development.rb

  # Send Unicorn logging to STDOUT.
  config.logger = Logger.new(STDOUT)
  config.logger.level = Logger.const_get(
    ENV['LOG_LEVEL'] ? ENV['LOG_LEVEL'].upcase : 'DEBUG'
  )
end
EOF
}


# Add bootstrap to application
bootstrapSetup()
{
if [[ $VERBOSE -eq 1 ]]; then echo "Adding bootstrap gems to Gemfile."; fi
cat << EOF >> Gemfile
  
# Use bootstrap for styles
gem 'bootstrap-sass'
gem 'autoprefixer-rails'
EOF

bundle install

if [[ $VERBOSE -eq 1 ]]; then echo "Replacing application.css with application.css.scss."; fi
rm app/assets/stylesheets/application.css
cat << EOF > app/assets/stylesheets/application.css.scss
@import "bootstrap-custom";
@import "bootstrap";

@import "*";
@import "**/*";
EOF

if [[ $VERBOSE -eq 1 ]]; then echo "Adding bootstrap to application.js."; fi
sed -i '/jquery_ujs/a //= require bootstrap' app/assets/javascripts/application.js

if [[ $VERBOSE -eq 1 ]]; then echo "Adding file for custom bootstrap overrides."; fi
touch app/assets/stylesheets/bootstrap-custom.css.scss
}


# Variables
APPNAME=""
VERBOSE=0
HAML=0
RSPEC=0
CUCUMBER=0
JASMINE=0
UNICORN=0
BOOTSTRAP=0

APPSERVER=':webrick'



# Parse command parameters
while :
do
  case $1 in
    -h | --help)
      usage
      exit 0
      ;;
    -v | --verbose)
      VERBOSE=1
      shift
      ;;
    --name)
      APPNAME=$2
      shift 2
      ;;
    --haml)
      HAML=1
      shift
      ;;
    --rspec)
      RSPEC=1
      shift
      ;;
    --cucumber)
      CUCUMBER=1
      shift
      ;;
    --jasmine)
      JASMINE=1
      shift
      ;;
    --unicorn)
      UNICORN=1
      shift
      ;;
    --bootstrap)
      BOOTSTRAP=1
      shift
      ;;
    -* | --*)
      echo "Unknown option encountered: $1"
      usage
      exit -1
      ;;
    *)
      break
      ;;
  esac
done


# Check that an application name was provided
if [[ -z $APPNAME ]]
then
  echo "A name for the new application must be provided."
  usage
  exit -1
fi


# Create new rails application
CREATECOMMAND="rails new $APPNAME"
if [[ $RSPEC -eq 1 ]]
then
  # If using RSpec, omit Test::Unit directory
  CREATECOMMAND="$CREATECOMMAND -T"
fi
if [[ $VERBOSE -eq 1 ]]; then echo "Creating new rails application."; fi
$CREATECOMMAND
cd ./$APPNAME


# Add HAML support, if HAML option is set
if [[ $HAML -eq 1 ]]
then
  addHamlGems
  replaceErbLayout
fi


# Add Gems for RSpec, Cucumber, and Jasmine if options are set
if [[ $RSPEC -eq 1 || $JASMINE -eq 1 ]]
then
  addTestingGemsDevTestGroup
fi
if [[ $RSPEC -eq 1 || $CUCUMBER -eq 1 ]]
then
  addTestingGemsTestGroup
fi
bundle install


# Add RSpec setup
if [[ $RSPEC -eq 1 ]]
then
  rspecSetup
fi


# Add Cucumber setup
if [[ $CUCUMBER -eq 1 ]]
then
  cucumberSetup
fi


# Add jasmine setup
if [[ $JASMINE -eq 1 ]]
then
  jasmineSetup
fi


# Add simplecov setup
if [[ $RSPEC -eq 1 || $CUCUMBER -eq 1 ]]
then
  simplecovSetup
fi


# Add unicorn setup
if [[ $UNICORN -eq 1 ]]
then
  unicornSetup
fi


# Add bootstrap setup
if [[ $BOOTSTRAP -eq 1 ]]
then
  bootstrapSetup
fi

# Exit
exit 0
